name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations.
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Run program and compare formatted outputs
      shell: bash
      run: |
        echo "Running program to compare formatted outputs..."
        cd "${{ steps.strings.outputs.build-output-dir }}"

        # Run the executable; adjust path based on OS.
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          ./Release/my_program.exe > formatted_output.log
        else
          chmod +x ./my_program || true  # Adjust if executable is in a subdirectory.
          ./my_program > formatted_output.log
        fi

        echo "----- Formatted Output -----"
        cat formatted_output.log
        echo "-----------------------------"

        # Compare output with expected formatted lines.
        grep -q "N=100 vector=17 list=14 list/vector=0.823529" formatted_output.log || (echo "Mismatch for N=100" && exit 1)
        grep -q "N=1000 vector=142 list=8035 list/vector=56.5845" formatted_output.log || (echo "Mismatch for N=1000" && exit 1)
        grep -q "N=10000 vector=320673 list=781103 list/vector=2.43582" formatted_output.log || (echo "Mismatch for N=10000" && exit 1)
        grep -q "N=30000 vector=1034427 list=10751006 list/vector=10.3932" formatted_output.log || (echo "Mismatch for N=30000" && exit 1)
        grep -q "N=100000 vector=7160236 list=95482998 list/vector=13.3352" formatted_output.log || (echo "Mismatch for N=100000" && exit 1)
        echo "Formatted output matches expected values!"
