name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Run program and compare formatted outputs
      shell: bash
      run: |
        echo "Running program to compare formatted outputs..."
        cd "${{ steps.strings.outputs.build-output-dir }}"
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          ./Release/my_program.exe > formatted_output.log
        else
          chmod +x ./my_program || true
          ./my_program > formatted_output.log
        fi

        echo "----- Formatted Output -----"
        cat formatted_output.log
        echo "-----------------------------"

        expected_count=5
        actual_count=$(grep -E "^N=[0-9]+ vector=[0-9]+ list=[0-9]+ list/vector=[0-9]*\.?[0-9]+$" formatted_output.log | wc -l)
        if [ "$actual_count" -ne "$expected_count" ]; then
          echo "Expected $expected_count lines of formatted output, but got $actual_count"
          exit 1
        fi
        echo "Formatted output matches expected format!"
